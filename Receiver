#include <String.h>
#include <LiquidCrystal_I2C.h>
LiquidCrystal_I2C lcd(0x27, 16, 2);
#include <Wire.h>
#include <SPI.h>
#include <SD.h>
#include <Time.h>

unsigned long current_Time;
unsigned long LCD_Period = (1 * 1000);
unsigned long SD_Period = (5 * 1000);
unsigned long refresh_LCD_Time;
unsigned long refresh_SD_Time;

const int chipSelect = 4;
const int cardDetect = 7;

bool alreadyBegan = false;  // SD.begin() misbehaves if not first call
char fileName[] = "tmpfile.txt";
float celsius;
int count = 0;
float lastcelsius;
float printHumidity;
float lastprintHumidity;
float printTemperature2;
int oldAlarm;
int lastalarmSet;
int pos = 0;
char buffer[100];
int num = 0;
char temperature[50];
char temperature2[50];
char humidity[50];
volatile int alarmSet = 0;
const int max_temp_celsius = 50;
const int min_temp_celsius = 0;

void setup() {
  // put your setup code here, to run once:
  lcd.init();
  lcd.backlight();
  Wire.begin();
  pinMode(cardDetect, INPUT);
  Serial.begin(115200);
  attachInterrupt(0, cw, FALLING);
  attachInterrupt(1, ccw, FALLING);
  current_Time = millis();
  refresh_LCD_Time = current_Time + LCD_Period;
  refresh_SD_Time = current_Time + SD_Period;
  pinMode(6, OUTPUT);
  pinMode(5, OUTPUT);

}

void loop() {


  current_Time = millis ();
  if (Serial.available() > 0)
  {
    int reading = Serial.read();         // read it and store it in 'val'
    if ( reading == '\r' )
    {
      //nothing
    }
    else if ( reading == '\n' )
    {
      buffer[pos] = '\0';
      pos = 0;
      processLine(buffer);
      mathPart();
      alarmPrintToLCD();
        if (!digitalRead(cardDetect))
  {
    initializeCard();
  }
      if ( current_Time > refresh_LCD_Time)
      {
        refresh_LCD_Time += LCD_Period;
        printToLCD();
      }

      if ( current_Time > refresh_SD_Time)
      {
        refresh_SD_Time += SD_Period;
     
        digitalWrite(5, HIGH);
        sdCard();
        delay(100);
        digitalWrite(5, LOW);
      }

    }
    else
    {
      buffer[pos] = reading;
      pos++;
    }
  }
}


void mathPart()
{
  int tmp1 = atoi(temperature);
  int tmp2 = atoi(temperature2);
  int hum1 = atoi(humidity);
  printHumidity = hum1;
  printTemperature2 = tmp2;
  celsius = tmp1 * 0.0625;
  if (celsius > alarmSet) {
    digitalWrite(6, HIGH);    // This writes a high to a pin or 5v
  }
  else {
    digitalWrite(6, LOW);     // This writes a low to a pin or grounds it
  }
}

void alarmPrintToLCD()
{
  while (alarmSet != oldAlarm)
  {
    lcd.clear();
    // Display celsius on the top row
    lcd.setCursor(0, 0);
    lcd.print("Alarm Set: ");
    lcd.print(alarmSet);

    oldAlarm = alarmSet;
    delay(325);
  }
}

void sdCard()
{

  File dataFile = SD.open(fileName, FILE_WRITE);
  // if the file is available, write to it:
  if (dataFile) {

    dataFile.print(count);
    dataFile.print(",");
    dataFile.print("Humidity");
    dataFile.print(",");
    dataFile.print(printHumidity);
    dataFile.print(",");
    dataFile.print("Celsius");
    dataFile.print(",");
    dataFile.println(celsius);
    dataFile.close();
    // print to the serial port too:
  }
  // if the file isn't open, pop up an error:
  else {
    Serial.print("error opening ");
    Serial.println(fileName);
  }
count ++;
}


void printToLCD()
{
  if (celsius != lastcelsius || printHumidity != lastprintHumidity)
    lcd.clear();
  // Display celsius on the top row
  lcd.setCursor(0, 0);
  lcd.print("Temp (");
  lcd.print((char)223);
  lcd.print("C) = ");
  lcd.print(celsius);

  lcd.setCursor(0, 1);
  lcd.print("Humidity  = ");
  lcd.print(printHumidity);
  lastcelsius = celsius;
  lastprintHumidity = printHumidity;
}



void processLine(char *s)
{
  int number = 0;
  Serial.print(num++);
  Serial.print(" ");
  Serial.println(s);
  Serial.print("*****TEMP/HUM*****");
  char *f;
  char buffer[100];
  char *t = buffer;
  strcpy(t, s);
  //Serial.print("* ");
  //Serial.println(t);
  for (;;)
  {
    f = strsep(&t, ",");
    Serial.println(" ");
    if (f == NULL)
    {
      Serial.println("f==NULL");
      break;
    }
    else
    {
      if (number == 0)
      {
        strcpy(temperature, f);
        Serial.print(temperature);
        number++;
      }
      else if (number == 1)
      {
        strcpy(humidity, f);                    // More sensors
        Serial.print(humidity);
        number++;
      }
      else if (number == 2)
      {
        strcpy(temperature2, f);
        Serial.print(temperature2);
        number++;
      }
    }
  }
}

void initializeCard(void)
{
  Serial.print(F("Initializing SD card..."));
  // Is there even a card?
  if (!digitalRead(cardDetect))
  {
    lcd.clear();
    // Display celsius on the top row
    lcd.setCursor(0, 0);
    lcd.print("   No SD Card");
    lcd.setCursor(0, 1);
    lcd.print("    Stand by ");
    count = 0;
    Serial.println(F("No card detected. Waiting for card."));
    while (!digitalRead(cardDetect));
    delay(100); // 'Debounce insertion'
  }
  // Card seems to exist.  begin() returns failure
  // even if it worked if it's not the first call.
  if (!SD.begin(chipSelect) && !alreadyBegan)  // begin uses half-speed...
  {
    Serial.println(F("Initialization failed!"));
    initializeCard(); // Possible infinite retry loop is as valid as anything
  }
  else
  {
    alreadyBegan = true;
  }
  Serial.println(F("Initialization done."));

  Serial.print(fileName);
  if (SD.exists(fileName))
  {
    Serial.println(F(" exists."));
  }
  else
  {
    Serial.println(F(" doesn't exist. Creating."));
  }
  Serial.print("Opening file: ");
  Serial.println(fileName);
}

void cw()
{
  int b = digitalRead(3);
  if (b == HIGH)
  {
    alarmSet++;
  }
}

void ccw()
{
  int a = digitalRead(2);
  if (a == HIGH)
  {
    alarmSet--;
  }
}

