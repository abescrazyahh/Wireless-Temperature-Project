#include <LiquidCrystal.h>
#include <Wire.h>
#include <String.h>
float celsius;
float printHumidity;
float printTemperature2;
int oldAlarm;
int pos = 0;
char buffer[100];
int num = 0;
char temperature[50];
char temperature2[50];
char humidity[50];
volatile int alarmSet = 0;
LiquidCrystal lcd(12, 11, 10, 9, 8, 7);   // initialize the library with the numbers of the interface pins
const int max_temp_celsius = 50;
const int min_temp_celsius = 0;

void setup() {
  // put your setup code here, to run once:
  Serial.begin(115200);
  pinMode(6, OUTPUT);
  // delay(500);
  lcd.begin(16, 2);
  lcd.display();
  attachInterrupt(0, cw, FALLING);

  attachInterrupt(1, ccw, FALLING);
  // set up the LCD's number of columns and rows:
}
void loop() {
  // put your main code here, to run repeatedly:
  if (Serial.available() > 0)
  {
    int reading = Serial.read();         // read it and store it in 'val'
    if ( reading == '\r' )
    {
      //nothing
    }
    else if ( reading == '\n' )
    {
      buffer[pos] = '\0';
      pos = 0;
      processLine(buffer);
      mathPart();
      printToLCD();
    }
    else
    {
      buffer[pos] = reading;
      pos++;
    }
  }
}
void mathPart()
{
  int tmp1 = atoi(temperature);
  int tmp2 = atoi(temperature2);
  int hum1 = atoi(humidity);
  printHumidity = hum1;
  printTemperature2 = tmp2;
  celsius = tmp1 * 0.0625;
  if (celsius > alarmSet) {
    digitalWrite(6, HIGH);    // This writes a high to a pin or 5v
  }
  else {
    digitalWrite(6, LOW);     // This writes a low to a pin or grounds it
  }
}
void printToLCD()
{
  //lcd.clear();
  // Display celsius on the top row
  lcd.setCursor(0, 0);
  //1234567890123456 digits for spaces on row
  lcd.print("T1=");
  lcd.print(celsius);
 
  lcd.print("T2=");
  lcd.print(printTemperature2);
  
  lcd.setCursor(0, 1);
  lcd.print("Humidity = ");
  lcd.print(printHumidity);
}
void processLine(char *s)
{
  int number = 0;
  Serial.print(num++);
  Serial.print(" ");
  Serial.println(s);
  Serial.print("*****TEMP/HUM*****");
  char *f;
  char buffer[100];
  char *t = buffer;
  strcpy(t, s);
  //Serial.print("* ");
  //Serial.println(t);
  for (;;)
  {
    f = strsep(&t, ",");
    Serial.println(" ");
    if (f == NULL)
    {
      Serial.println("f==NULL");
      break;
    }
    else
    {
      if (number == 0)
      {
        strcpy(temperature, f);
        Serial.print(temperature);
        number++;
      }
   else if (number == 1)
    {
      strcpy(humidity, f);                    // More sensors
       Serial.print(humidity);
       number++;
     }
      else if (number == 2)
      {
        strcpy(temperature2, f);
        Serial.print(temperature2);
        number++;
      }

    }
  }
}


void cw()
{
  int b = digitalRead(3);
  if (b == HIGH)
  {
    alarmSet++;
  }
  if (alarmSet > max_temp_celsius)
    alarmSet = max_temp_celsius;

  lcd.clear();
  lcd.setCursor(0, 0);
  //1234567890123456 digits for spaces on row
  lcd.print("Alarm temp= ");
  lcd.print(alarmSet);
  lcd.setCursor(0, 1);
  lcd.print("Alarm Set @ ");
  lcd.print(alarmSet);
  lcd.print((char)223);
}

void ccw()
{
  int a = digitalRead(2);
  if (a == HIGH)
  {
    alarmSet--;
  }
  if (alarmSet < min_temp_celsius)
    alarmSet = min_temp_celsius;

  lcd.clear();
  lcd.setCursor(0, 0);
  //1234567890123456 digits for spaces on row
  lcd.print("Alarm temp= ");
  lcd.print(alarmSet);
  lcd.setCursor(0, 1);
  lcd.print("Alarm Set @ ");
  lcd.print(alarmSet);
  lcd.print((char)223);
}
