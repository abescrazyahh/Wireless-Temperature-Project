#include <LiquidCrystal.h>
#include <Wire.h>
#include <String.h>
float celsius;

int oldAlarm;
int pos = 0;
char buffer[100];
int num = 0;
char temperature[50];
char humidity[50];
volatile int alarmSet = 0;
LiquidCrystal lcd(12, 11, 10, 9, 8, 7);   // initialize the library with the numbers of the interface pins
const int max_temp_celsius = 50;
const int min_temp_celsius = 0;

void setup() {
  // put your setup code here, to run once:
  Serial.begin(115200);
  pinMode(6, OUTPUT);
  // delay(500);
  lcd.begin(16, 2);
  lcd.display();
     attachInterrupt(0, cw, FALLING);
       
  attachInterrupt(1, ccw, FALLING);
  // set up the LCD's number of columns and rows:
}

void loop() {

 
  // put your main code here, to run repeatedly:
  if (Serial.available() > 0)
  {
  int reading = Serial.read();         // read it and store it in 'val'
    if ( reading == '\r' )
    {
      //nothing
    }
    else if ( reading == '\n' )
    {

 
      buffer[pos] = '\0';
      pos = 0;
      processLine(buffer);

     
      mathPart();
      printToLCD();


     
    }
    else
    {
      buffer[pos] = reading;
      pos++;
    }
  }
}
void mathPart()
{
  int tmp = atoi(temperature) ;
 
  celsius = tmp * 0.0625;


  if (celsius > alarmSet) {
    digitalWrite(6, HIGH);    // This writes a high to a pin or 5v
  }
  else {
    digitalWrite(6, LOW);     // This writes a low to a pin or grounds it
  }
}

void printToLCD()
 
  {
    // Display celsius on the top row
    lcd.setCursor(0, 0);
    //1234567890123456 digits for spaces on row
    lcd.print("Temp in C= ");
    lcd.print(celsius);
    // Display fahrenheit to the bottom row
  }

void processLine(char *s)
{
  int number = 0;
  Serial.print(num++);
  Serial.print(" ");
  Serial.println(s);
  char *f;
  char buffer[100];
  char *t = buffer;
  strcpy(t, s);
  Serial.print("* ");
  Serial.println(t);\
  for (;;)
  {
    f = strsep(&t, ",");
    if (f == NULL)
    {
      Serial.println("f==NULL");
      break;
    }
    else
    {
      if (number == 0)
      {
        strcpy(temperature, f);
      }
      /* else if (number == 1)
        {
         strcpy(humidity, f);                     More sensors
        }
      */
      //  Serial.print(number++);
      //  Serial.print(" ");
      //  Serial.println(f);
    }

  }
}

void cw()
{
  int b = digitalRead(3);
  if (b == HIGH)
  {
    alarmSet++;

   
  }
  if (alarmSet > max_temp_celsius)
    alarmSet = max_temp_celsius;

  lcd.clear();
    lcd.setCursor(0, 0);
    //1234567890123456 digits for spaces on row
    lcd.print("Alarm temp= ");
    lcd.print(alarmSet);
    // Display fahrenheit to the bottom row

 
}

void ccw()
{
  int a = digitalRead(2);
  if (a == HIGH)
  {
    alarmSet--;
  }
  if (alarmSet < min_temp_celsius)
    alarmSet = min_temp_celsius;
   
      lcd.clear();
    lcd.setCursor(0, 0);
    //1234567890123456 digits for spaces on row
    lcd.print("Alarm temp= ");
    lcd.print(alarmSet);
    // Display fahrenheit to the bottom row
}
